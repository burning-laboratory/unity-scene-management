name: DocFX Build and Publish

on:
  push:
    branches: [ main ]

env:
  UNITY_VER: 2022.2.17f1
  ULF_FILE: Unity_v2022.2.ulf
    
jobs:
  request_alf:
    name: Request .alf file ðŸ”‘
    runs-on: ubuntu-latest
    outputs:
      alf: ${{ steps.output.outputs.alf }}
    steps:
      - name: Request manual activation file
        id: alfFile
        uses: game-ci/unity-request-activation-file@main
        with:
          unityVersion: ${{ env.UNITY_VER }}

      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.alfFile.outputs.filePath }}
          path: ${{ steps.alfFile.outputs.filePath }}

      - name: Output
        id: output
        run: |
          echo "::set-output name=alf::${{ steps.alfFile.outputs.filePath }}"

  acquire_ulf:
    needs: [request_alf]
    name: Acquire .ulf file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      - name: Download .alf artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.request_alf.outputs.alf }}

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Install node package, `unity-license-activate`
        run: npm install --global unity-license-activate

      - name: Install node package, `unity-verify-code`
        run: npm install --global unity-verify-code

      - name: Activate the license
        continue-on-error: true
        run: unity-license-activate "${{ secrets.UNITY_EMAIL }}" "${{ secrets.UNITY_PASSWORD }}" "${{ needs.request_alf.outputs.alf }}"

      - name: Update secret UNITY_LICENSE
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'UNITY_LICENSE'
          value: '${{ needs.request_alf.outputs.alf }}'
          token: "${{ secrets.REPO_ACCESS_TOKEN  }}"

  generate-docs:
    needs: [acquire_ulf]
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101
          
      - name: Setup DocFX
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install docfx
        
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Install node package, `unity-license-activate`
        run: npm install --global unity-license-activate

      - name: Activate the license
        run: unity-license-activate "${{ secrets.UNITY_EMAIL }}" "${{ secrets.UNITY_PASSWORD }}" "${{ needs.request_alf.outputs.alf }}"

      - name: Update secret UNITY_LICENSE
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'UNITY_LICENSE'
          value: '${{ needs.request_alf.outputs.alf }}'
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Run Unity Build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64

      - name: Install dependencies
        run: dotnet restore
          
      - name: DocFX Build
        working-directory: Documentation
        run: docfx docfx.json
        continue-on-error: false
        
      - name: Publish
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _site
          force_orphan: true
